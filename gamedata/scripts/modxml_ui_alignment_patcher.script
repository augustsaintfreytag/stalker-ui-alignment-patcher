-- Logging

local function log(...)
	printf(...)
end

-- Config

local CONFIG = modxml_ui_alignment_patcher_config

-- Entry Point

function on_xml_read()
	log("Loading Saint's DXML UI alignment patcher.")

	RegisterScriptCallback("on_xml_read", function(xml_scope_name, xml_obj)
		-- Prevalidation

		local file_name = file_name_from_scope_name(xml_scope_name)

		-- Return if `xml_scope_name` does not start with "ui\"
		if not string.find(xml_scope_name, "ui\\") then
			return
		end

		-- Skip proxy files in UI directories.
		if string.find(xml_scope_name, "scroll_bar") then
			return
		end

		if not xml_obj or not xml_obj.xml_table or not xml_obj.xml_table.kids or not xml_obj.xml_table.kids[1] then
			log("DXML UI patcher could not read XML file '%s', skipping.", xml_scope_name)
			return
		end

		-- Processing

		if CONFIG.FORCE_PATCH_ALL_UI_FILES then
			patch_xml_file(file_name, xml_obj)
		else
			for _, pattern in ipairs(CONFIG.UI_FILE_PATTERNS) do
				if string.find(file_name, pattern) then
					patch_xml_file(file_name, xml_obj)
				end
			end
		end
	end)
end

-- File-Level Patch

function patch_xml_file(file_name, xml_obj)
	log("DXML UI patcher processing file '%s'.", file_name)

	-- Select all `text` elements in tree.
	local text_element_objects = xml_obj:query("text")

	-- Go through all `text` elements and check if parent tag matches any parent element patterns.
	for _, text_element_object in ipairs(text_element_objects) do
		local parent_element_object = text_element_object.parent
		local parent_tag = tag_from_element(parent_element_object.el)
		local text_tag = tag_from_element(text_element_object.el)

		if not parent_element_object then
			-- log("DXML UI patcher found text element '%s' with no parent, will be skipped.", parent_tag)
			goto continue
		end

		for _, pattern in ipairs(CONFIG.UI_TEXT_PARENT_ELEMENT_PATTERNS) do
			-- Check if parent tag matches pattern for patching.
			if CONFIG.FORCE_PATCH_ALL_TEXT_ELEMENTS or string.find(parent_tag, pattern) then
				log("DXML UI patcher modifying text element '%s' with parent '%s'.", text_tag, parent_tag)
				patch_text_element(xml_obj, text_element_object)
			end
		end

		::continue::
	end

	patch_custom_values(file_name, xml_obj)
end

-- Custom Value Patch

function patch_custom_values(file_name, xml_obj)
	local custom_values = CONFIG.UI_CUSTOM_VALUE[file_name] or {}

	for query, value in pairs(custom_values) do
		local element_objects = xml_obj:query(query) or {}

		for _, element_object in ipairs(element_objects) do
			if not element_object then
				log("DXML UI patcher could not find element for custom override value for file '%s' by query '%s'.",
					file_name, query)
				goto continue
			end

			local element_tag = tag_from_element(element_object.el)

			if type(value) == "table" then
				log("DXML UI patcher applying custom attributes to '%s', set to '%s'.", element_tag,
					debug_description_for_table(value))
				xml_obj:setElementAttr(element_object, value)
			else
				log("DXML UI patcher applying custom value to '%s', set to '%s'.", element_tag, value)
				xml_obj:setText(element_object, value)
			end

			::continue::
		end
	end
end

-- Text Element Alignment Patch

function patch_text_element(xml_obj, text_element_object)
	xml_obj:setElementAttr(text_element_object, {
		complex_mode = "1",
		vert_align = "c"
	})
end

-- Utility

function tag_from_element(element)
	-- Return sanitized tag name from element identifier.
	-- Example input: `<btn_cancel complex_mode="1"`, output "btn_cancel"

	local output = element

	-- Step #1, remove initial character.
	output = output:sub(2)

	-- Step #2, match tag name.
	output = string.match(output, "([%w_]+)")

	return output
end

-- Return extracted XML module name without path or file extension from scope name.
-- Example input: "ui\ui_mm_main.xml", output: "ui_mm_main"
function file_name_from_scope_name(scope_name)
	local index_of_last_path_separator = string.find(scope_name, "\\[^\\]*$")
	local file_name_with_extension = string.sub(scope_name, index_of_last_path_separator + 1)
	local index_of_extension_separator = string.find(file_name_with_extension, "%.[^%.]*$")
	local file_name = string.sub(file_name_with_extension, 1, index_of_extension_separator - 1)

	return file_name
end

-- Debug

function debug_description_for_table(tbl)
	if not type(tbl) == "table" then return tostring(tbl) end

	local result = "{ "

	for k, v in pairs(tbl) do
		-- If the key is a string, surround it with quotes
		if type(k) == "string" then
			k = '"' .. k .. '"'
		end

		-- If the value is a string, surround it with quotes
		if type(v) == "string" then
			v = '"' .. v .. '"'
		end

		-- Add the key-value pair to the result string
		result = result .. k .. " = " .. tostring(v) .. ", "
	end

	-- Remove the last comma and space, and add the closing brace
	result = result:sub(1, -3) .. " }"

	return result
end
